from docplex.mp.model import Model

# 定义模型
mdl = Model('RJSP')

# 输入数据结构
jobs = [
    [1, 'Job1', [0, 1, 3, 2, 4], [[0, 0],[1, 8], [3, 6], [2, 10],[4, 0]]],
    [2, 'Job2', [0, 1, 2, 3, 4], [[0, 0],[1, 3], [2, 1], [3, 4],[4, 0]]],
    [3, 'Job3', [0, 2, 3, 1, 4], [[0, 0],[2, 8], [3, 5], [1, 10],[4, 0]]]
]
# jobs = [
#     [1, 'Job1', [0, 1, 3, 2, 4], [[0, 0],[1, 8], [3, 6], [2, 10],[4, 0]]]
# ]
# 机器的位置
PM = {0: 0, 1: 1, 2: 2, 3: 3, 'd': 0, 's': 4, 4: 4}

# 最大操作数
max_operations_solution = max(len(job[2]) for job in jobs)
max_operations = 15
# 大M方法的M值，足够大以确保约束有效
big_m = 1000

# 添加决策变量
SM = {(i, j): mdl.continuous_var(name=f'SM_{i}_{j}') for i in range(1, len(jobs) + 1) for j in range(1, max_operations_solution + 1)}
X = {(i, j, k): mdl.binary_var(name=f'X_{i}_{j}_{k}') for i in range(1, len(jobs) + 1) for j in range(1, max_operations_solution + 1) for k in range(1, max_operations + 1)}

Z = {(i, j, h, g): mdl.binary_var(name=f'Z_{i}_{j}_{h}_{g}')
     for i in range(1, len(jobs) + 1)
     for j in range(1, len(jobs[i-1][2]) + 1)
     for h in range(1, len(jobs) + 1)
     for g in range(1, len(jobs[h-1][2]) + 1)}




# 约束 1.1
C_max = mdl.continuous_var(name='C_max')
for i, job in enumerate(jobs, start=1):
    for j in range(1, len(job[2]) + 1):
        mdl.add_constraint(C_max >= SM[i, j] + job[3][j-1][1])

# 约束 1.2
mdl.add_constraint(SM[1, 1] == abs(PM[jobs[0][2][0]] - PM[0]))
# 约束 1.3
mdl.add_constraint(X[1, 1, 1] == 1)
# 约束 1.4
for i, job in enumerate(jobs, start=1):
    for j in range(1, len(job[2])):
        PT_ij = job[3][j-1][1]  # 从输入数据中提取处理时间
        machine_ij = job[2][j-1]  # 当前操作的机器编号
        machine_next = job[2][j]  # 下一个操作的机器编号
        # 计算转移时间
        tl_ij = abs(PM[machine_ij] - PM[machine_next])
        #print(tl_ij,'tl_ij')
        mdl.add_constraint(SM[i, j] + PT_ij + tl_ij <= SM[i, j+1])
# 约束 1.5
for i, job in enumerate(jobs, start=1):
    for j in range(1, len(job[2]) + 1):
        mdl.add_constraint(mdl.sum(X[i, j, k] for k in range(1, max_operations + 1)) == 1)
# 约束 1.6
for i in range(1, len(jobs) + 1):
    for j in range(1, len(jobs[i-1][2]) + 1):
        for k in range(1, max_operations + 1):
            mdl.add_constraint(
                mdl.sum(X[i, m, p] for m in range(j+1, len(jobs[i-1][2]) + 1) for p in range(1, k+1)) - (1 - X[i, j, k]) * big_m <= 0,
                f'c1_6_job_{i}_op_{j}_prio_{k}'
            )
# 补充约束 1.6
for i in range(1, len(jobs) + 1):
    for j in range(1, len(jobs[i-1][2]) + 1):
        for k in range(1, max_operations + 1):
            mdl.add_constraint(
                mdl.sum(X[m, n, k] for m in range(1, len(jobs) + 1) for n in range(1, len(jobs[m-1][2]) + 1) if not (m == i and n == j)) - (1 - X[i, j, k]) * big_m <= 0,
                f'c*_*_job_{i}_op_{j}_prio_{k}'
            )
# 约束 1.7
for i in range(1, len(jobs) + 1):
    for j in range(1, len(jobs[i-1][2]) + 1):  # +1 to include the dummy stock operation
        for k in range(1, max_operations + 1):
            for m in range(1, len(jobs) + 1):
                for n in range(1, len(jobs[m-1][2]) + 1):  # +1 to include the dummy stock operation
                    for p in range(1, max_operations + 1):
                        if k < p and i != m:
                            # 使用大M方法线性化
                            mdl.add_constraint(
                                (SM[i, j] - SM[m, n]) * (k - p) + (2 - X[i, j, k] - X[m, n, p]) * big_m >= 0
                            )
# 约束 1.8
for i in range(1, len(jobs) + 1):
    for j in range(2, len(jobs[i-1][2]) + 1):  # 从第二个操作开始
        for k in range(2, max_operations + 1):  # 从第二个优先级开始
            # tlij 是机器人从 Mi(j-1) 携带作业 i 移动到 Mij 的载荷移动时间
            tlij = abs(PM[jobs[i-1][2][j-2]] - PM[jobs[i-1][2][j-1]])
            for m in range(1, len(jobs) + 1):
                for n in range(1, len(jobs[m-1][2]) + 1):  # 对所有作业m的所有操作n
                    if m != i:  # 排除当前作业的当前操作
                        # tu_mnij 是机器人完成操作 Omn 后空载移动到 Mij 的时间
                        tu_mnij = abs(PM[jobs[m-1][2][n-1]] - PM[jobs[i-1][2][j-2]])
                        # 确保如果 Oij 在 Omn 之后执行，那么它必须在 Omn 完成后加上移动时间之后开始
                        mdl.add_constraint(
                            SM[i, j] + (2 - X[m, n, k-1] - X[i, j, k]) * big_m >=
                            SM[m, n] + tu_mnij + tlij
                        )
# 约束 1.9
for i in range(1, len(jobs) + 1):
    for k in range(2, max_operations + 1):  # 从第二个优先级开始
        for m in range(1, len(jobs) + 1):
            for n in range(1, len(jobs[m-1][2]) + 1):  # 对所有作业m的所有操作n
                if m != i:  # 排除当前作业的当前操作
                    # tu_mnD 是机器人完成操作 Mn 后空载移动到输出站 D 的时间
                    tu_mnD = abs(PM[jobs[m-1][2][n-1]] - PM[0])  # 假设输出仓库位置是 'd'
                    # tl_D1 是机器人从输入仓库 D 携带作业 i 移动到作业 i 的第一个操作 M1i 的载荷移动时间
                    tl_D1 = abs(PM[0] - PM[jobs[i-1][2][0]])  # 从输入仓库到作业i的第一个操作的移动时间
                    # 确保如果机器人计划在完成Mn后处理作业i的第一个操作，则必须等待足够的移动时间

                    mdl.add_constraint(
                        SM[i, 1] + (2 - X[m, n, k-1] - X[i, 1, k]) * big_m >=
                        SM[m, n] + tu_mnD + tl_D1
                    )
# 约束 1.10
for i in range(1, len(jobs) + 1):
    for j in range(1, len(jobs[i-1][2]) + 1):
        for h in range(1, len(jobs) + 1):
            for g in range(1, len(jobs[h-1][2]) + 1):
                if jobs[i-1][2][j-1] == jobs[h-1][2][g-1] and i != h:  # 同一台机器
                    # 添加约束确保两个作业的操作不能同时执行
                    mdl.add_constraint(Z[i, j, h, g] + Z[h, g, i, j] == 1, ctname=f'concurrent_op_{i}_{j}_{h}_{g}')

# 约束 1.11
for i in range(1, len(jobs) + 1):
    for j in range(1, len(jobs[i-1][2]) + 1):
        for h in range(1, len(jobs) + 1):
            for g in range(1, len(jobs[h-1][2]) + 1):
                if jobs[i-1][2][j-1] == jobs[h-1][2][g-1] and i != h:  # 确保是同一台机器上的操作
                    PT_ij = jobs[i-1][3][j-1][1]  # 操作 Oij 的处理时间
                    # 如果 Oij 在 Ohg 之前执行，则添加顺序约束
                    mdl.add_constraint(SM[h, g] >= SM[i, j] + PT_ij - (1 - Z[i, j, h, g]) * big_m)
# 约束 1.12
for i in range(1, len(jobs) + 1):
    for j in range(1, len(jobs[i-1][2]) + 1):
        for h in range(1, len(jobs) + 1):
            for g in range(1, len(jobs[h-1][2]) + 1):
                # 检查两个操作是否在同一台机器上
                if jobs[i-1][2][j-1] == jobs[h-1][2][g-1] and i != h:  # 机器编号相同
                    PT_hg = jobs[h-1][3][g-1][1]  # 操作 Ohg 的处理时间
                    # 如果 Oij 计划在 Ohg 之后执行，则添加顺序约束
                    mdl.add_constraint(SM[i, j] >= SM[h, g] + PT_hg - Z[i, j, h, g] * big_m)

# 约束 1.13
for i in range(1, len(jobs) + 1):
    for j in range(1, len(jobs[i-1][2])):  # 不包括每个作业的最后一个操作
        for h in range(1, len(jobs) + 1):
            for g in range(2, len(jobs[h-1][2])):  # 不包括每个作业的最后一个操作
                if jobs[i-1][2][j] == jobs[h-1][2][g] and i != h:  # 同一台机器
                    # 从 i(j+1) 到 h(g-1) 的空载移动时间
                    tu_ij_plus_1_hg_deplus_1 = abs(PM[jobs[i-1][2][j]] - PM[jobs[h-1][2][g-2]]) if g > 1 else 0
                    # 从 h(g-1) 到 hg 的载荷移动时间
                    tl_hg = abs(PM[jobs[h-1][2][g-2]] - PM[jobs[h-1][2][g-1]]) if g > 1 else 0
                    # 添加约束
                    mdl.add_constraint(
                        SM[h, g] >= SM[i, j+1] + tu_ij_plus_1_hg_deplus_1 + tl_hg - (1 - Z[i, j+1, h, g]) * big_m
                    )

#约束 1.14
for i in range(1, len(jobs) + 1):
    for j in range(2, len(jobs[i-1][2])):  # 包括作业的所有操作
        for h in range(1, len(jobs) + 1):
            for g in range(1, len(jobs[h-1][2])):  # 不包括每个作业的最后一个操作
                if jobs[i-1][2][j-1] == jobs[h-1][2][g] and i != h:  # 确保是同一台机器
                    # 计算从 h(g+1) 到 i(j-1) 的空载移动时间
                    tu_h_g_plus_1_i_j_deplus_1 = abs(PM[jobs[h-1][2][g]] - PM[jobs[i-1][2][j-2]]) if j > 1 else 0
                    # 计算从 i(j-1) 到 ij 的载荷移动时间
                    tl_ij = abs(PM[jobs[i-1][2][j-2]] - PM[jobs[i-1][2][j-1]]) if j > 1 else 0
                    # 添加约束
                    mdl.add_constraint(
                        SM[i, j] >= SM[h, g+1] + tu_h_g_plus_1_i_j_deplus_1 + tl_ij - Z[i, j, h, g] * big_m
                    )

# 约束 1.15
for i in range(1, len(jobs) + 1):
    for j in range(1, len(jobs[i-1][2])):  # 不包括每个作业的最后一个操作
        tu_ij1_D = abs(PM[jobs[i-1][2][j]] - PM[0])  # 假设输出仓库位置是 'd'
        tl_i1 = abs(PM[0] - PM[jobs[i-1][2][0]])  # 假设作业 i 的第一个操作 i1 的位置
        for h in range(1, len(jobs) + 1):
            if jobs[i-1][2][j] == jobs[h-1][2][0] and i != h:  # 确保操作在同一台机器上
                # 添加约束，确保如果 Oij 在 Oh1 之前加工，那么 Oh1 不能在 Oij 完成之前开始
                mdl.add_constraint(
                    SM[h, 1] >= SM[i, j+1] + tu_ij1_D + tl_i1 - Z[i, j, h, 1] * big_m
                )

# # 约束 1.16
for i in range(1, len(jobs) + 1):
    # 从作业 h 的操作 g+1 到输出仓库 D 的空载移动时间
    # 从输出仓库 D 到作业 i 的第一个操作 i1 的载荷移动时间
    tl_i1 = abs(PM[0] - PM[jobs[i-1][2][0]])  # 假设作业 i 的第一个操作 i1 的位置
    for h in range(1, len(jobs) + 1):
        for g in range(1, len(jobs[h-1][2])):  # 不包括每个作业的最后一个操作
            tu_hg1_D = abs(PM[jobs[h - 1][2][g]] - PM[0])  # 假设输出仓库位置是 'd'
            if jobs[i-1][2][0] == jobs[h-1][2][g] and i != h:  # 确保操作在同一台机器上
                # 添加约束
                mdl.add_constraint(
                    SM[i, 1] >= SM[h, g+1] + tu_hg1_D + tl_i1 -  Z[i, 1, h, g]* big_m
                )


# print("模型中的约束条件：")
# for constraint in mdl.iter_constraints():
#     print(constraint)



# 目标函数
mdl.minimize(C_max)

# 求解模型
solution = mdl.solve()

print("模型中的约束条件：")
for constraint in mdl.iter_constraints():
    print(constraint)



# 输出结果
if solution:
    print(f'Total completion time C_max: {C_max.solution_value}')
    print(X[1, 1, 1].solution_value,'X[1, 1, 1].solution_value')
    print(X[2, 1, 1].solution_value, 'X[2, 1, 1].solution_value')
    print(X[1, 1, 2].solution_value, 'X[1, 1, 2].solution_value')
    for i in range(1, len(jobs) + 1):
        for j in range(1, max_operations_solution + 1):
            #print(f'Start time for operation {j} of job {i}: {SM[i, j].solution_value if (i, j) in SM else "N/A"}')
            for k in range(1, max_operations + 1):
                if (i, j, k) in X and X[i, j, k].solution_value > 0.5:
                    print(X[i, j, k].solution_value,'X[i, j, k].solution_value')
                    print(f'Operation {j} of job {i} has priority {k}')
else:
    print("No solution found")
